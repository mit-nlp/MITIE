/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


    #include "swig_api.h"
    

#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< TokenIndexPair >::const_reference std_vector_Sl_TokenIndexPair_Sg__get(std::vector< TokenIndexPair > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_TokenIndexPair_Sg__set(std::vector< TokenIndexPair > *self,int i,std::vector< TokenIndexPair >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< EntityMention >::const_reference std_vector_Sl_EntityMention_Sg__get(std::vector< EntityMention > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_EntityMention_Sg__set(std::vector< EntityMention > *self,int i,std::vector< EntityMention >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_edu_mit_ll_mitie_globalJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_edu_mit_ll_mitie_globalJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1TokenIndexVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< TokenIndexPair > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< TokenIndexPair > *)new std::vector< TokenIndexPair >();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< TokenIndexPair > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1TokenIndexVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< TokenIndexPair >::size_type arg1 ;
  std::vector< TokenIndexPair > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< TokenIndexPair >::size_type)jarg1; 
  {
    try {
      result = (std::vector< TokenIndexPair > *)new std::vector< TokenIndexPair >(arg1);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< TokenIndexPair > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_TokenIndexVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< TokenIndexPair > *arg1 = (std::vector< TokenIndexPair > *) 0 ;
  std::vector< TokenIndexPair >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TokenIndexPair > **)&jarg1; 
  {
    try {
      result = ((std::vector< TokenIndexPair > const *)arg1)->size();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_TokenIndexVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< TokenIndexPair > *arg1 = (std::vector< TokenIndexPair > *) 0 ;
  std::vector< TokenIndexPair >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TokenIndexPair > **)&jarg1; 
  {
    try {
      result = ((std::vector< TokenIndexPair > const *)arg1)->capacity();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_TokenIndexVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< TokenIndexPair > *arg1 = (std::vector< TokenIndexPair > *) 0 ;
  std::vector< TokenIndexPair >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TokenIndexPair > **)&jarg1; 
  arg2 = (std::vector< TokenIndexPair >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_edu_mit_ll_mitie_globalJNI_TokenIndexVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< TokenIndexPair > *arg1 = (std::vector< TokenIndexPair > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TokenIndexPair > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< TokenIndexPair > const *)arg1)->empty();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_TokenIndexVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< TokenIndexPair > *arg1 = (std::vector< TokenIndexPair > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TokenIndexPair > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_TokenIndexVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< TokenIndexPair > *arg1 = (std::vector< TokenIndexPair > *) 0 ;
  std::vector< TokenIndexPair >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< TokenIndexPair > **)&jarg1; 
  arg2 = *(std::vector< TokenIndexPair >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TokenIndexPair >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< TokenIndexPair >::value_type const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_TokenIndexVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< TokenIndexPair > *arg1 = (std::vector< TokenIndexPair > *) 0 ;
  int arg2 ;
  std::vector< TokenIndexPair >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< TokenIndexPair > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< TokenIndexPair >::value_type *) &std_vector_Sl_TokenIndexPair_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< TokenIndexPair >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_TokenIndexVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< TokenIndexPair > *arg1 = (std::vector< TokenIndexPair > *) 0 ;
  int arg2 ;
  std::vector< TokenIndexPair >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< TokenIndexPair > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< TokenIndexPair >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TokenIndexPair >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_TokenIndexPair_Sg__set(arg1,arg2,(TokenIndexPair const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_delete_1TokenIndexVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< TokenIndexPair > *arg1 = (std::vector< TokenIndexPair > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< TokenIndexPair > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1EntityMentionVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< EntityMention > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (std::vector< EntityMention > *)new std::vector< EntityMention >();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< EntityMention > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1EntityMentionVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< EntityMention >::size_type arg1 ;
  std::vector< EntityMention > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< EntityMention >::size_type)jarg1; 
  {
    try {
      result = (std::vector< EntityMention > *)new std::vector< EntityMention >(arg1);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< EntityMention > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMentionVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< EntityMention > *arg1 = (std::vector< EntityMention > *) 0 ;
  std::vector< EntityMention >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< EntityMention > **)&jarg1; 
  {
    try {
      result = ((std::vector< EntityMention > const *)arg1)->size();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMentionVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< EntityMention > *arg1 = (std::vector< EntityMention > *) 0 ;
  std::vector< EntityMention >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< EntityMention > **)&jarg1; 
  {
    try {
      result = ((std::vector< EntityMention > const *)arg1)->capacity();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMentionVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< EntityMention > *arg1 = (std::vector< EntityMention > *) 0 ;
  std::vector< EntityMention >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< EntityMention > **)&jarg1; 
  arg2 = (std::vector< EntityMention >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMentionVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< EntityMention > *arg1 = (std::vector< EntityMention > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< EntityMention > **)&jarg1; 
  {
    try {
      result = (bool)((std::vector< EntityMention > const *)arg1)->empty();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMentionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< EntityMention > *arg1 = (std::vector< EntityMention > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< EntityMention > **)&jarg1; 
  {
    try {
      (arg1)->clear();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMentionVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< EntityMention > *arg1 = (std::vector< EntityMention > *) 0 ;
  std::vector< EntityMention >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< EntityMention > **)&jarg1; 
  arg2 = *(std::vector< EntityMention >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< EntityMention >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->push_back((std::vector< EntityMention >::value_type const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMentionVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< EntityMention > *arg1 = (std::vector< EntityMention > *) 0 ;
  int arg2 ;
  std::vector< EntityMention >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< EntityMention > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< EntityMention >::value_type *) &std_vector_Sl_EntityMention_Sg__get(arg1,arg2);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return 0;
      }
      
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< EntityMention >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMentionVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< EntityMention > *arg1 = (std::vector< EntityMention > *) 0 ;
  int arg2 ;
  std::vector< EntityMention >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< EntityMention > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< EntityMention >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< EntityMention >::value_type const & reference is null");
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_EntityMention_Sg__set(arg1,arg2,(EntityMention const &)*arg3);
      }
      catch(std::out_of_range &_e) {
        SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
        return ;
      }
      
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_delete_1EntityMentionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< EntityMention > *arg1 = (std::vector< EntityMention > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< EntityMention > **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_edu_mit_ll_mitie_globalJNI_loadEntireFile(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = loadEntireFile((std::string const &)*arg1);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_tokenize(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = tokenize((std::string const &)*arg1);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_TokenIndexPair_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  TokenIndexPair *arg1 = (TokenIndexPair *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TokenIndexPair **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_TokenIndexPair_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TokenIndexPair *arg1 = (TokenIndexPair *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TokenIndexPair **)&jarg1; 
  result = (unsigned long) ((arg1)->index);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_TokenIndexPair_1token_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  TokenIndexPair *arg1 = (TokenIndexPair *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TokenIndexPair **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->token = *arg2;
}


SWIGEXPORT jstring JNICALL Java_edu_mit_ll_mitie_globalJNI_TokenIndexPair_1token_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  TokenIndexPair *arg1 = (TokenIndexPair *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TokenIndexPair **)&jarg1; 
  result = (std::string *) & ((arg1)->token);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1TokenIndexPair(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  TokenIndexPair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (TokenIndexPair *)new TokenIndexPair();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(TokenIndexPair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_delete_1TokenIndexPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TokenIndexPair *arg1 = (TokenIndexPair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TokenIndexPair **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_tokenizeWithOffsets(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::vector< TokenIndexPair > result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = tokenizeWithOffsets((std::string const &)*arg1);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< TokenIndexPair > **)&jresult = new std::vector< TokenIndexPair >((const std::vector< TokenIndexPair > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1EntityMention_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  EntityMention *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (EntityMention *)new EntityMention();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(EntityMention **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1EntityMention_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  EntityMention *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (EntityMention *)new EntityMention(arg1,arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(EntityMention **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1EntityMention_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  double arg4 ;
  EntityMention *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (EntityMention *)new EntityMention(arg1,arg2,arg3,arg4);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(EntityMention **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMention_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EntityMention *arg1 = (EntityMention *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityMention **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT jint JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMention_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EntityMention *arg1 = (EntityMention *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityMention **)&jarg1; 
  result = (int) ((arg1)->start);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMention_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EntityMention *arg1 = (EntityMention *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityMention **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT jint JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMention_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EntityMention *arg1 = (EntityMention *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityMention **)&jarg1; 
  result = (int) ((arg1)->end);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMention_1tag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  EntityMention *arg1 = (EntityMention *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityMention **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tag = arg2;
}


SWIGEXPORT jint JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMention_1tag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  EntityMention *arg1 = (EntityMention *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityMention **)&jarg1; 
  result = (int) ((arg1)->tag);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMention_1score_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  EntityMention *arg1 = (EntityMention *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityMention **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT jdouble JNICALL Java_edu_mit_ll_mitie_globalJNI_EntityMention_1score_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  EntityMention *arg1 = (EntityMention *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(EntityMention **)&jarg1; 
  result = (double) ((arg1)->score);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_delete_1EntityMention(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  EntityMention *arg1 = (EntityMention *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(EntityMention **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_BinaryRelation_1item_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  BinaryRelation *arg1 = (BinaryRelation *) 0 ;
  mitie::binary_relation arg2 ;
  mitie::binary_relation *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BinaryRelation **)&jarg1; 
  argp2 = *(mitie::binary_relation **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null mitie::binary_relation");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->item = arg2;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_BinaryRelation_1item_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  BinaryRelation *arg1 = (BinaryRelation *) 0 ;
  mitie::binary_relation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BinaryRelation **)&jarg1; 
  result =  ((arg1)->item);
  *(mitie::binary_relation **)&jresult = new mitie::binary_relation((const mitie::binary_relation &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1BinaryRelation(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  BinaryRelation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (BinaryRelation *)new BinaryRelation();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(BinaryRelation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_delete_1BinaryRelation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BinaryRelation *arg1 = (BinaryRelation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BinaryRelation **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1TotalWordFeatureExtractor(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  TotalWordFeatureExtractor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (TotalWordFeatureExtractor *)new TotalWordFeatureExtractor((std::string const &)*arg1);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(TotalWordFeatureExtractor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_delete_1TotalWordFeatureExtractor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  TotalWordFeatureExtractor *arg1 = (TotalWordFeatureExtractor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(TotalWordFeatureExtractor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1NamedEntityExtractor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  NamedEntityExtractor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (NamedEntityExtractor *)new NamedEntityExtractor((std::string const &)*arg1);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(NamedEntityExtractor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1NamedEntityExtractor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  NamedEntityExtractor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (NamedEntityExtractor *)new NamedEntityExtractor((std::string const &)*arg1,(std::string const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(NamedEntityExtractor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1NamedEntityExtractor_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  TotalWordFeatureExtractor *arg2 = 0 ;
  NamedEntityExtractor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(TotalWordFeatureExtractor **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TotalWordFeatureExtractor const & reference is null");
    return 0;
  } 
  {
    try {
      result = (NamedEntityExtractor *)new NamedEntityExtractor((std::string const &)*arg1,(TotalWordFeatureExtractor const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(NamedEntityExtractor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_NamedEntityExtractor_1getPossibleNerTags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NamedEntityExtractor *arg1 = (NamedEntityExtractor *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NamedEntityExtractor **)&jarg1; 
  {
    try {
      result = ((NamedEntityExtractor const *)arg1)->getPossibleNerTags();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_NamedEntityExtractor_1saveToDisk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  NamedEntityExtractor *arg1 = (NamedEntityExtractor *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NamedEntityExtractor **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((NamedEntityExtractor const *)arg1)->saveToDisk((std::string const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_NamedEntityExtractor_1extractEntities_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  NamedEntityExtractor *arg1 = (NamedEntityExtractor *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  std::vector< EntityMention > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NamedEntityExtractor **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((NamedEntityExtractor const *)arg1)->extractEntities((std::vector< std::string > const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< EntityMention > **)&jresult = new std::vector< EntityMention >((const std::vector< EntityMention > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_NamedEntityExtractor_1extractEntities_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  NamedEntityExtractor *arg1 = (NamedEntityExtractor *) 0 ;
  std::vector< TokenIndexPair > *arg2 = 0 ;
  std::vector< EntityMention > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NamedEntityExtractor **)&jarg1; 
  arg2 = *(std::vector< TokenIndexPair > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< TokenIndexPair > const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((NamedEntityExtractor const *)arg1)->extractEntities((std::vector< TokenIndexPair > const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(std::vector< EntityMention > **)&jresult = new std::vector< EntityMention >((const std::vector< EntityMention > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_NamedEntityExtractor_1extractBinaryRelation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  NamedEntityExtractor *arg1 = (NamedEntityExtractor *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  EntityMention *arg3 = 0 ;
  EntityMention *arg4 = 0 ;
  BinaryRelation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(NamedEntityExtractor **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return 0;
  } 
  arg3 = *(EntityMention **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "EntityMention const & reference is null");
    return 0;
  } 
  arg4 = *(EntityMention **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "EntityMention const & reference is null");
    return 0;
  } 
  {
    try {
      result = ((NamedEntityExtractor const *)arg1)->extractBinaryRelation((std::vector< std::string > const &)*arg2,(EntityMention const &)*arg3,(EntityMention const &)*arg4);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(BinaryRelation **)&jresult = new BinaryRelation((const BinaryRelation &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_delete_1NamedEntityExtractor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NamedEntityExtractor *arg1 = (NamedEntityExtractor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NamedEntityExtractor **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1BinaryRelationDetector(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  BinaryRelationDetector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (BinaryRelationDetector *)new BinaryRelationDetector((std::string const &)*arg1);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(BinaryRelationDetector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_BinaryRelationDetector_1saveToDisk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  BinaryRelationDetector *arg1 = (BinaryRelationDetector *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BinaryRelationDetector **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((BinaryRelationDetector const *)arg1)->saveToDisk((std::string const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jstring JNICALL Java_edu_mit_ll_mitie_globalJNI_BinaryRelationDetector_1getNameString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  BinaryRelationDetector *arg1 = (BinaryRelationDetector *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(BinaryRelationDetector **)&jarg1; 
  {
    try {
      result = ((BinaryRelationDetector const *)arg1)->getNameString();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_edu_mit_ll_mitie_globalJNI_BinaryRelationDetector_1classify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jdouble jresult = 0 ;
  BinaryRelationDetector *arg1 = (BinaryRelationDetector *) 0 ;
  BinaryRelation *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(BinaryRelationDetector **)&jarg1; 
  arg2 = *(BinaryRelation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BinaryRelation const & reference is null");
    return 0;
  } 
  {
    try {
      result = (double)((BinaryRelationDetector const *)arg1)->classify((BinaryRelation const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_delete_1BinaryRelationDetector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  BinaryRelationDetector *arg1 = (BinaryRelationDetector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(BinaryRelationDetector **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1NerTrainingInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  NerTrainingInstance *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  {
    try {
      result = (NerTrainingInstance *)new NerTrainingInstance(*arg1);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(NerTrainingInstance **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_NerTrainingInstance_1addEntity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jstring jarg4) {
  NerTrainingInstance *arg1 = (NerTrainingInstance *) 0 ;
  unsigned long arg2 ;
  unsigned long arg3 ;
  char *arg4 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NerTrainingInstance **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  arg3 = (unsigned long)jarg3; 
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  {
    try {
      (arg1)->addEntity(arg2,arg3,(char const *)arg4);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_NerTrainingInstance_1getSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  NerTrainingInstance *arg1 = (NerTrainingInstance *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NerTrainingInstance **)&jarg1; 
  {
    try {
      result = (unsigned long)(arg1)->getSize();
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_delete_1NerTrainingInstance(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NerTrainingInstance *arg1 = (NerTrainingInstance *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NerTrainingInstance **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1NerTrainer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  NerTrainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (NerTrainer *)new NerTrainer((std::string const &)*arg1);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(NerTrainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_mit_ll_mitie_globalJNI_new_1NerTrainer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  TotalWordFeatureExtractor *arg1 = 0 ;
  NerTrainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(TotalWordFeatureExtractor **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "TotalWordFeatureExtractor const & reference is null");
    return 0;
  } 
  {
    try {
      result = (NerTrainer *)new NerTrainer((TotalWordFeatureExtractor const &)*arg1);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return 0;
    }
  }
  *(NerTrainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_NerTrainer_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  NerTrainer *arg1 = (NerTrainer *) 0 ;
  NerTrainingInstance *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(NerTrainer **)&jarg1; 
  arg2 = *(NerTrainingInstance **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NerTrainingInstance const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->add((NerTrainingInstance const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_NerTrainer_1setThreadNum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  NerTrainer *arg1 = (NerTrainer *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NerTrainer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  {
    try {
      (arg1)->setThreadNum(arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_NerTrainer_1train(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  NerTrainer *arg1 = (NerTrainer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NerTrainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((NerTrainer const *)arg1)->train((std::string const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_NerTrainer_1trainSeparateModels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  NerTrainer *arg1 = (NerTrainer *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(NerTrainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      ((NerTrainer const *)arg1)->trainSeparateModels((std::string const &)*arg2);
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


SWIGEXPORT void JNICALL Java_edu_mit_ll_mitie_globalJNI_delete_1NerTrainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  NerTrainer *arg1 = (NerTrainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(NerTrainer **)&jarg1; 
  {
    try {
      delete arg1;
    } catch(std::exception& e) {
      jclass clazz = jenv->FindClass("java/lang/Exception");
      jenv->ThrowNew(clazz, e.what());
      return ;
    }
  }
}


#ifdef __cplusplus
}
#endif

